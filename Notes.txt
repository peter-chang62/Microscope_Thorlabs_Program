TO DO ITEMS: 

1) Right now you have a self._npts telling you how many points you have left in your scan. Verify what the length of self._FT is compared to self._npts and make it so that the for loop fills an array instead of appending to a list for self._FT. This saves a large CPU and memory cost operation at the end of a line scan. 

2) You've connected all the position setting buttons in the imaging tab. It's time to code up the imaging itself now! :) 

Imaging done!

The imaging really can be sped up (around a factor of 2 or a little more) if you implement the stage triggering:

1) There's a toggling issue, so you probably need to collect one data point after to line up the workbuffer with the spatial position of the sample

2) connect_tracking_stream_update in self.stream1 and self.stream2 should be inherited and edited to remove the call to updatedisplay. This is already removed when you are saving data to storage_buffer, and now you just want to remove it altogether when doing linescans.

3) also in connect_tracking_stream_update you will connect a new function that does the same analysis on the storage buffer as the analysis done in acquire_and_get_spectrum(). It might be worth using the timer package to see how long that analysis is currently taking for 1000 interferograms first. But hopefully it's okay ...

4) Instead of the drop down menu in the line scan panel, be able to set the apodization window dynamically so that you can test out different fft lengths. This can increase the SNR, since you don't save it in the time domain, you can't go back and change that later in post processing after the experiment. 

5) Add a save button.

2023-02-20 16:18

6) You can change your fft to np.fft.rfft, and adjust the frequency axis calculation: the Nyquist window is simply np.fft.rfftfreq(ppifg, d=1e-9) * ppifg. This also makes calculating the apodized frequency axis quite easy!
